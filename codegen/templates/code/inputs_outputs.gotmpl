package {{worker_import_prefix $}}

import (
    parameters "{{ $.Project.ParametersImportPath }}"

{{- if needs_metrics }}
    {{$.Project.KindLower}}metrics "{{ $.Project.MetricsImportPath }}"
{{- end }}
)

{{- if has_inputs $}}

type Inputs struct {

    {{- range $param := $.Inputs }}

        {{- if is_metrics $param }}
    {{$param.PluralName}} {{$.Project.KindLower}}metrics.{{$.Project.Kind}}Metrics

        {{- else}}
    {{$param.PluralName}} parameters.{{$param.PluralName}}

        {{- end}}
    {{- end}}
}

{{- range $param := $.Inputs }}
    {{- if not (is_metrics $param) }}
// what's {empty} ? did you mean parameters.{{$param.SingleName}}{}
// Find{{$param.SingleName}} returns <{{$param.SingleName}}, true> if the item is found. else {empty}, false
func (i Inputs) Find{{$param.SingleName}}(name, namespace string) (parameters.{{$param.SingleName}}, bool) {
    for _, 	item := range i.{{$param.PluralName}}.Items {
        if item.Name == name && item.Namespace == namespace {
        	return item, true
        }
    }
    return parameters.{{$param.SingleName}}{}, false
}
    {{- end}}
{{- end }}


{{- end}}

{{- if has_outputs $}}

type Outputs struct {
    {{- range $param := $.Outputs }}
    {{$param.PluralName}} parameters.{{$param.PluralName}}
    {{- end}}
}
{{- end}}
