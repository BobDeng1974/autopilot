package scheduler

import (
    "context"
    "fmt"
    "time"

    "github.com/solo-io/autopilot/pkg/utils"
    "sigs.k8s.io/controller-runtime/pkg/handler"
    "sigs.k8s.io/controller-runtime/pkg/manager"
    "sigs.k8s.io/controller-runtime/pkg/reconcile"
    logf "sigs.k8s.io/controller-runtime/pkg/log"

    {{.Version}} "{{.TypesImportPath}}"

    config "{{.ConfigImportPath}}"

{{- range $phase := .Phases }}
    {{- range $param := $phase.Outputs }}
    {{param_import_prefix $param}} "{{param_package $param}}"
    {{- end}}
{{- end}}

    "github.com/solo-io/autopilot/pkg/metrics"

{{- range $phase := .Phases}}
    {{- if or (has_inputs $phase) (has_outputs $phase) }}
    {{worker_import_prefix $phase}} "{{worker_package $phase}}"
    {{- end}}
{{- end}}

)

var log = logf.Log.WithName("scheduler")

func AddToManager(ctx context.Context, mgr manager.Manager, namespace string) error {
    scheduler, err := NewScheduler(ctx, mgr, namespace)
    if err != nil {
    	return err
    }
    // Create a new controller
    c, err := controller.New("{{.KindLowerCamel}}-controller", mgr, controller.Options{Reconciler: scheduler})
    if err != nil {
        return err
    }

    // Watch for changes to primary resource {{.Kind}}
    log.Info("Registering watch for primary resource {{.Kind}}")
    err = c.Watch(&source.Kind{Type: &{{$.Version}}.{{$.Kind}}{}}, &handler.EnqueueRequestForObject{})
    if err != nil {
        return err
    }

{{- range $phase := .Phases }}
    {{- range $param := $phase.Outputs }}

    // Watch for changes to secondary resource {{param_name_plural $param }} and requeue the owner {{$.Kind}}
    log.Info("Registering watch for primary resource secondary resource {{param_name_plural $param }}")
    err = c.Watch(&source.Kind{Type: &{{param_import_prefix $param }}.{{param_name_singular $param }}{}}, &handler.EnqueueRequestForOwner{
        IsController: true,
        OwnerType:    &{{$.Version}}.{{$.Kind}}{},
    })
    if err != nil {
        return err
    }
    {{- end}}
{{- end}}

    return nil

}

var WorkInterval = config.WorkInterval

type Scheduler struct {
    ctx context.Context
    kube utils.EzKube
    Metrics metrics.Metrics
    namespace string
}

func NewScheduler(ctx context.Context, mgr manager.Manager, namespace string ) (*Scheduler, error) {
	kube := utils.NewEzKube(&{{$.Version}}.{{$.Kind}}{}, mgr)

    metricsFactory, err := metrics.NewFactory(config.MetricsServer, config.MeshProvider, time.Second * 30)
    if err != nil {
    	return nil, err
    }

    return &Scheduler{
    	ctx:       ctx,
    	kube:      kube,
        Metrics:   metricsFactory.Observer(),
        namespace: namespace,
    }, nil
}

func (s *Scheduler) Reconcile(request reconcile.Request) (reconcile.Result, error) {
    result := reconcile.Result{RequeueAfter: WorkInterval}

    {{$.KindLowerCamel}} := &{{$.Version}}.{{$.Kind}}{}
    {{$.KindLowerCamel}}.Namespace = request.Namespace
    {{$.KindLowerCamel}}.Name = request.Name

    if err := s.kube.Get(s.ctx, {{$.KindLowerCamel}}); err != nil {
        return result, err
    }
    switch {{$.KindLowerCamel}}.Status.Phase {
{{- range $phase := .Phases}}
    {{- if $phase.Initial }}
    case "", {{$.Version}}.{{$.Kind}}Phase{{$phase.Name}}:
    {{- else }}
    case {{$.Version}}.{{$.Kind}}Phase{{$phase.Name}}:
    {{- end}}
        log.Info("Syncing {{$.Kind}} %v in phase {{$phase.Name}}", {{$.KindLowerCamel}}.Name)

    {{- if is_final $phase }}
        // end state, do not requeue
        return reconcile.Result{}, nil
    {{- else }}

        {{- if has_inputs $phase }}
		inputs, err := s.make{{ $phase.Name}}Inputs()
		if err != nil {
			return result, err
		}

            {{- if has_outputs $phase }}
        outputs, nextPhase, err := (&{{worker_import_prefix $phase}}.Worker{Kube:s.kube}).Sync(s.ctx, {{$.KindLowerCamel}}, inputs)
		if err != nil {
			return result, err
		}
            {{- else}}
        nextPhase, err := (&{{worker_import_prefix $phase}}.Worker{Kube:s.kube}).Sync(s.ctx, {{$.KindLowerCamel}}, inputs)
		if err != nil {
			return result, err
		}

            {{- end}}

        {{- else}}
            {{- if has_outputs $phase }}
        outputs, nextPhase, err := (&{{worker_import_prefix $phase}}.Worker{Kube:s.kube}).Sync(s.ctx, {{$.KindLowerCamel}})
		if err != nil {
			return result, err
		}
            {{- else}}
        nextPhase, err := (&{{worker_import_prefix $phase}}.Worker{Kube:s.kube}).Sync(s.ctx, {{$.KindLowerCamel}})
		if err != nil {
			return result, err
		}
            {{- end}}
        {{- end}}

        {{- range $out := $phase.Outputs }}
		for _, out := range outputs.{{ param_name_plural $out }} {
			if err := s.kube.Ensure(s.ctx, out); err != nil {
				return result, err
			}
		}
        {{- end}}

        {{$.KindLowerCamel}}.Status.Phase = nextPhase
		if err := s.kube.UpdateStatus(s.ctx, {{$.KindLowerCamel}}); err != nil {
			return result, err
		}

        return result, err
        {{- end}}
    {{- end}}
    }
    return result, fmt.Errorf("cannot process {{.Kind}} in unknown phase: %v", {{$.KindLowerCamel}}.Status.Phase)
}

{{- range $phase := .Phases}}
    {{- if has_inputs $phase }}
func (s *Scheduler) make{{ $phase.Name}}Inputs() ({{worker_import_prefix $phase}}.Inputs, error) {
	var (
		inputs {{worker_import_prefix $phase}}.Inputs
	    err error
    )

        {{- range $param := $phase.Inputs }}
            {{- if is_metrics $param }}
    inputs.{{param_name_plural $param}} = s.Metrics
            {{- else}}
    inputs.{{param_name_plural $param}}, err = s.kube.List{{param_name_plural $param}}(s.ctx, s.namespace)
    if err != nil {
        return inputs, err
    }
            {{- end}}
        {{- end}}

    return inputs, err
}
{{- end}}
{{- end}}
