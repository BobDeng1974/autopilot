// Code generated by protoc-gen-go. DO NOT EDIT.
// source: autopilot-operator.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// MeshProviders provide an interface to monitoring and managing a specific
// mesh.
// Autopilot does not abstract the mesh API - Autopilot developers must
// still reason able about Provider-specific CRDs. Autopilot's job is to
// abstract operational concerns such as discovering control plane configuration
// and monitoring metrics.
type MeshProvider int32

const (
	// the Operator will utilize Istio mesh for metrics and configuration
	MeshProvider_Istio MeshProvider = 0
	// the Operator will utilize a locally deployed Prometheus instance for metrics
	// (Currently unimplemented)
	MeshProvider_Custom MeshProvider = 1
)

var MeshProvider_name = map[int32]string{
	0: "Istio",
	1: "Custom",
}

var MeshProvider_value = map[string]int32{
	"Istio":  0,
	"Custom": 1,
}

func (x MeshProvider) String() string {
	return proto.EnumName(MeshProvider_name, int32(x))
}

func (MeshProvider) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_56f975433f2c607a, []int{0}
}

// The AutopilotOperator file is the bootstrap
// Configuration file for the Operator.
// It is stored and mounted to the operator as a Kubernetes ConfigMap.
// The Operator will hot-reload when the configuration file changes.
// Default name is 'autopilot-operator.yaml' and should be stored in the project root.
type AutopilotOperator struct {
	// version of the operator
	// used for logging and metrics
	// default is "0.0.1"
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// meshProvider determines how the operator will connect to a service mesh
	// Default is "SMI"
	MeshProvider MeshProvider `protobuf:"varint,2,opt,name=meshProvider,proto3,enum=autopilot.MeshProvider" json:"meshProvider,omitempty"`
	// controlPlaneNs is the namespace the control plane lives in
	// Default is "istio-system"
	ControlPlaneNs string `protobuf:"bytes,3,opt,name=controlPlaneNs,proto3" json:"controlPlaneNs,omitempty"`
	// workInterval to sets the interval at which CRD workers resync.
	// Default is 5s
	WorkInterval *duration.Duration `protobuf:"bytes,4,opt,name=workInterval,proto3" json:"workInterval,omitempty"`
	// Serve metrics on this address. Set to empty string to disable metrics
	// defaults to ":9091"
	MetricsAddr string `protobuf:"bytes,5,opt,name=metricsAddr,proto3" json:"metricsAddr,omitempty"`
	// Enable leader election. This will prevent more than one operator from running at a time
	// defaults to true
	EnableLeaderElection bool `protobuf:"varint,6,opt,name=enableLeaderElection,proto3" json:"enableLeaderElection,omitempty"`
	// if non-empty, watchNamespace will restrict the Operator to watching resources in a single namespace
	// if empty (default), the Operator must have Cluster-scope RBAC permissions (ClusterRole/Binding)
	// can also be set via the WATCH_NAMESPACE environment variable
	WatchNamespace string `protobuf:"bytes,7,opt,name=watchNamespace,proto3" json:"watchNamespace,omitempty"`
	// The namespace to use for Leader Election (requires read/write ConfigMap permissions)
	// defaults to the watchNamespace
	LeaderElectionNamespace string `protobuf:"bytes,8,opt,name=leaderElectionNamespace,proto3" json:"leaderElectionNamespace,omitempty"`
	// Log level for the operator's logger
	// values:
	// 0 - Debug
	// 1 - Info
	// 2 - Warn
	// 3 - Error
	// 4 - DPanic
	// 5 - Panic
	// 6 - Fatal
	// Defaults to Info
	LogLevel             *wrappers.UInt32Value `protobuf:"bytes,9,opt,name=logLevel,proto3" json:"logLevel,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *AutopilotOperator) Reset()         { *m = AutopilotOperator{} }
func (m *AutopilotOperator) String() string { return proto.CompactTextString(m) }
func (*AutopilotOperator) ProtoMessage()    {}
func (*AutopilotOperator) Descriptor() ([]byte, []int) {
	return fileDescriptor_56f975433f2c607a, []int{0}
}

func (m *AutopilotOperator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AutopilotOperator.Unmarshal(m, b)
}
func (m *AutopilotOperator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AutopilotOperator.Marshal(b, m, deterministic)
}
func (m *AutopilotOperator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutopilotOperator.Merge(m, src)
}
func (m *AutoPilotOperator) XXX_Size() int {
	return xxx_messageInfo_AutoPilotOperator.Size(m)
}
func (m *AutoPilotOperator) XXX_DiscardUnknown() {
	xxx_messageInfo_AutoPilotOperator.DiscardUnknown(m)
}

var xxx_messageInfo_AutoPilotOperator proto.InternalMessageInfo

func (m *AutoPilotOperator) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *AutoPilotOperator) GetMeshProvider() MeshProvider {
	if m != nil {
		return m.MeshProvider
	}
	return MeshProvider_Istio
}

func (m *AutoPilotOperator) GetControlPlaneNs() string {
	if m != nil {
		return m.ControlPlaneNs
	}
	return ""
}

func (m *AutoPilotOperator) GetWorkInterval() *duration.Duration {
	if m != nil {
		return m.WorkInterval
	}
	return nil
}

func (m *AutoPilotOperator) GetMetricsAddr() string {
	if m != nil {
		return m.MetricsAddr
	}
	return ""
}

func (m *AutoPilotOperator) GetEnableLeaderElection() bool {
	if m != nil {
		return m.EnableLeaderElection
	}
	return false
}

func (m *AutoPilotOperator) GetWatchNamespace() string {
	if m != nil {
		return m.WatchNamespace
	}
	return ""
}

func (m *AutoPilotOperator) GetLeaderElectionNamespace() string {
	if m != nil {
		return m.LeaderElectionNamespace
	}
	return ""
}

func (m *AutoPilotOperator) GetLogLevel() *wrappers.UInt32Value {
	if m != nil {
		return m.LogLevel
	}
	return nil
}

func init() {
	proto.RegisterEnum("autopilot.MeshProvider", MeshProvider_name, MeshProvider_value)
	proto.RegisterType((*AutoPilotOperator)(nil), "autopilot.AutoPilotOperator")
}

func init() { proto.RegisterFile("autopilot-operator.proto", fileDescriptor_56f975433f2c607a) }

var fileDescriptor_56f975433f2c607a = []byte{
	// 379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x4d, 0xcb, 0xd3, 0x40,
	0x14, 0x85, 0x8d, 0xaf, 0xfd, 0xc8, 0xb4, 0x94, 0x3a, 0x08, 0x1d, 0x45, 0x24, 0x28, 0x95, 0x20,
	0x34, 0xc1, 0x74, 0x53, 0x10, 0x17, 0xf5, 0x63, 0x51, 0xa8, 0xb5, 0x04, 0x74, 0xe1, 0x6e, 0x92,
	0x5c, 0xd3, 0xc1, 0x49, 0x6e, 0x98, 0x99, 0xa4, 0x3f, 0xd0, 0x3f, 0x26, 0x4d, 0xda, 0xd8, 0x58,
	0xdf, 0x65, 0xee, 0x73, 0xee, 0x3d, 0xe7, 0x64, 0x08, 0xe3, 0xa5, 0xc1, 0x42, 0x48, 0x34, 0x0b,
	0x2c, 0x40, 0x71, 0x83, 0xca, 0x2b, 0x14, 0x1a, 0xa4, 0x76, 0x4b, 0x9e, 0xbd, 0x48, 0x11, 0x53,
	0x09, 0x7e, 0x0d, 0xa2, 0xf2, 0xa7, 0x9f, 0x94, 0x8a, 0x1b, 0x81, 0x79, 0x23, 0xbd, 0xe5, 0x47,
	0xc5, 0x8b, 0x02, 0x94, 0x6e, 0xf8, 0xcb, 0xdf, 0x77, 0xe4, 0xf1, 0xba, 0x34, 0xb8, 0x3f, 0x5d,
	0xfb, 0x7a, 0xb6, 0xa1, 0x8c, 0x0c, 0x2a, 0x50, 0x5a, 0x60, 0xce, 0x2c, 0xc7, 0x72, 0xed, 0xf0,
	0xf2, 0x49, 0xdf, 0x91, 0x71, 0x06, 0xfa, 0xb0, 0x57, 0x58, 0x89, 0x04, 0x14, 0x7b, 0xe8, 0x58,
	0xee, 0x24, 0x98, 0x79, 0x6d, 0x22, 0xef, 0xcb, 0x15, 0x0e, 0x3b, 0x62, 0xfa, 0x9a, 0x4c, 0x62,
	0xcc, 0x8d, 0x42, 0xb9, 0x97, 0x3c, 0x87, 0x9d, 0x66, 0x77, 0xf5, 0xf5, 0x7f, 0xa6, 0xf4, 0x3d,
	0x19, 0x1f, 0x51, 0xfd, 0xda, 0xe4, 0x06, 0x54, 0xc5, 0x25, 0x7b, 0xe4, 0x58, 0xee, 0x28, 0x78,
	0xea, 0x35, 0x5d, 0xbc, 0x4b, 0x17, 0xef, 0xd3, 0xb9, 0x6b, 0xd8, 0x91, 0x53, 0x87, 0x8c, 0x32,
	0x30, 0x4a, 0xc4, 0x7a, 0x9d, 0x24, 0x8a, 0xf5, 0x6a, 0x8f, 0xeb, 0x11, 0x0d, 0xc8, 0x13, 0xc8,
	0x79, 0x24, 0x61, 0x0b, 0x3c, 0x01, 0xf5, 0x59, 0x42, 0x7c, 0xba, 0xc3, 0xfa, 0x8e, 0xe5, 0x0e,
	0xc3, 0xff, 0xb2, 0x53, 0xf8, 0x23, 0x37, 0xf1, 0x61, 0xc7, 0x33, 0xd0, 0x05, 0x8f, 0x81, 0x0d,
	0x9a, 0xf0, 0xdd, 0x29, 0x5d, 0x91, 0x99, 0xec, 0x6c, 0xfe, 0x5d, 0x18, 0xd6, 0x0b, 0xf7, 0x61,
	0xba, 0x22, 0x43, 0x89, 0xe9, 0x16, 0x2a, 0x90, 0xcc, 0xae, 0x2b, 0x3f, 0xbf, 0xa9, 0xfc, 0x6d,
	0x93, 0x9b, 0x65, 0xf0, 0x9d, 0xcb, 0x12, 0xc2, 0x56, 0xfd, 0x66, 0x4e, 0xc6, 0xd7, 0xbf, 0x9d,
	0xda, 0xa4, 0xb7, 0xd1, 0x46, 0xe0, 0xf4, 0x01, 0x25, 0xa4, 0xff, 0xb1, 0xd4, 0x06, 0xb3, 0xa9,
	0xf5, 0x61, 0xfe, 0xe3, 0x55, 0x2a, 0xcc, 0xa1, 0x8c, 0xbc, 0x18, 0x33, 0x5f, 0xa3, 0xc4, 0x85,
	0x40, 0xbf, 0x7d, 0x3a, 0x9f, 0x17, 0xc2, 0xaf, 0xde, 0x46, 0xfd, 0xda, 0x6d, 0xf9, 0x27, 0x00,
	0x00, 0xff, 0xff, 0x65, 0xd6, 0x43, 0x67, 0x81, 0x02, 0x00, 0x00,
}
