// The following Schema defines the structure of the `autopilot.yaml` configuration file.
//
// This file is used to generate and re-generate the project structure, as well
// as execute tasks related to build and deployment. It can be consumed
// both via the `ap` CLI as well as in `codegen` packages.
syntax = "proto3";
package autopilot;

import "google/protobuf/wrappers.proto";

option go_package = "github.com/solo-io/autopilot/api/v1";

// The AutopilotProject file is the root configuration file for the project itself.
//
// This file will be used to build and deploy the autopilot operator.
// It is loaded automatically by the autopilot CLI. Its
// default location is 'autopilot.yaml'
message AutopilotProject {
    // the name of the Operator
    // this is used to name and label loggers, k8s resources, and metrics exposed
    // by the operator. Should be [a valid Kube resource name](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
    string operatorName = 1;

    // the set of Top-Level Custom Resources that are managed by this Operator.
    // the Operator will run a [Controller](https://kubernetes.io/docs/concepts/architecture/controller/)
    // loop for each resource.
    // To add CRDs without creating a controller,
    // set enableController: false on the resource.
    repeated Resource resources = 2;

    // Third-party CRDs which can be used as parameters.
    // Extends Autopilot's builtin types
    repeated ThirdPartyResource thirdPartyResources = 5;

    // custom Queries which extend Autopilot's builtin metrics queries
    repeated MetricsQuery queries = 6;
}

// An Autopilot Resource is a Custom Resource.
// Autopilot will generate Go code for
//
message Resource {
    // the name (kubernetes Kind) of the Custom Resource
    // e.g. "MyResource"
    string kind = 1;

    // the Api Group of the top-level
    // CRD for the operator
    // e.g. "mycompany.io"
    string group = 2;

    // e.g. "v1"
    string version  = 3;

    // Each phase represents a different
    // stage in the lifecycle of the CRD (e.g. Pending/Succeeded/Failed).
    // <br>
    // Each phase specifies a unique name
    // and its own set of inputs and outputs.
    // <br>
    // If a controller is generated for this Resource,
    // each phase will define the inputs/outputs and work function
    // the controller will run.
    repeated Phase phases = 4;

    // Generate and run a controller to manage this resource.
    // This is set to 'true' by default.
    // Set this to 'false' to create the resource without generating or running a controller for it.
    google.protobuf.BoolValue enableController = 5;

    // enable use of a Finalizer to handle object deletion.
    // only applies if enableController is not set to false
    bool enableFinalizer = 6;
}

// MeshProviders provide an interface to monitoring and managing a specific
// mesh.
//
// Autopilot does not abstract the mesh API - Autopilot developers must
// still reason able about Provider-specific CRDs. Autopilot's job is to
// abstract operational concerns such as discovering control plane configuration
// and monitoring metrics.
message Phase {
    // name of the phase. must be unique
    string name = 1;

    // description of the phase. used for comments and docs
    string description = 2;

    // indicates whether this is the initial phase of the system.
    // exactly one phase must be the initial phase
    bool initial = 3;

    // indicates whether this is a "final" or "resting" phase of the system.
    // when the CRD is in the final phase, no more processing will be done on it
    bool final = 4;

    // The set of inputs for this phase.
    // The inputs will be retrieved by the scheduler
    // and passed to the worker as input parameters.
    repeated Input inputs = 5;

    // the set of outputs for this phase
    // the inputs will be propagated to k8s storage (etcd) by the scheduler.
    //
    // custom outputs can be defined in the
    // autopilot.yaml
    repeated Output outputs = 6;
}

// Input represents an input parameter type
// These can either be a k8s resource,
// a metric, or a webhook.
message Input {
    oneof inputType {
        // a kubernetes resource. this can include builtin and custom resources.
        // <br>
        // Only one of `resource`, `metric`, or `webhook` should be set.
        ResourceParameter resource = 1;

        // a named metric query. this can reference either a built-in query,
        // or a custom query defined in the root of the `autopilot.yaml`
        // the names of built-in queries are listed here: https://docs.solo.io/autopilot/latest/reference/queries
        string metric = 2;

        // the name of a webhook defined in the `autopilot.yaml`.
        // Phase inputs will contain a queue of unprocessed of payloads
        // received by the webhook.
        string webhook = 3;
    }
}

// Output represents an output parameter type
// Currently, these can only be a k8s resource
message Output {
    oneof outputType {
        // a kubernetes resource. this can include builtin and custom resources.
        // <br>
        // Only `resource` can currently be set.
        ResourceParameter resource = 1;
    }
}

message ResourceParameter {
    // resource Api Kind
    string kind = 1;
    // resource Api Group. leave empty for core resources
    string group = 2;
    // resource Api Version
    string version = 3;

    // parameter should be a list of resources
    // (in one or all namespaces)
    // if set to false (default)
    bool list = 4;
}

// ThirdPartyCustomResource allow code to be generated
// for input/output CRDs that are not built-in to Autopilot.
// These types must be Kubernetes-compatible Go structs.
message ThirdPartyResource {
    // the singular CamelCased name of the resource
    // equivalent to Kind
    string kind = 1;

    // Kubernetes API group for the resource
    // e.g. "networking.istio.io"
    string group = 2;

    // Kubernetes API Version for the resource
    // e.g. "v1beta3"
    string version = 3;

    // the plural CamelCased name of the resource
    // equivalent to the pluralized form of Kind
    string pluralKind = 4;

    // go package (import path) containing the go struct for the resource
    string goPackage = 5;
}

// MetricsQueries extend the query options available to workers.
// MetricsQueries are accessible to workers via generated client code
// that lives in <project root>/pkg/metrics
//
//
// The following MetricsQuery:
//
// ```
// name: success-rate
// parameters:
// - Name
// - Namespace
// - Interval
// queryTemplate: |
//     sum(
//         rate(
//             envoy_cluster_upstream_rq{
//                 kubernetes_namespace="{{ .Namespace }}",
//                 kubernetes_pod_name=~"{{ .Name }}-[0-9a-zA-Z]+(-[0-9a-zA-Z]+)",
//                 envoy_response_code!~"5.*"
//             }[{{ .Interval }}]
//         )
//     )
//     /
//     sum(
//         rate(
//             envoy_cluster_upstream_rq{
//                 kubernetes_namespace="{{ .Namespace }}",
//                 kubernetes_pod_name=~"{{ .Name }}-[0-9a-zA-Z]+(-[0-9a-zA-Z]+)"
//             }[{{ .Interval }}]
//         )
//     )
//     * 100
// ```
//
// would produce the following `metrics` Interface:
//
// ```go
// type CanaryDeploymentMetrics interface {
//     metrics.Client
//     GetIstioSuccessRate(ctx context.Context, Namespace, Name, Interval string) (*metrics.QueryResult, error)
//     GetIstioRequestDuration(ctx context.Context, Namespace, Name, Interval string) (*metrics.QueryResult, error)
//     GetEnvoySuccessRate(ctx context.Context, Namespace, Name, Interval string) (*metrics.QueryResult, error)
//     GetEnvoyRequestDuration(ctx context.Context, Namespace, Name, Interval string) (*metrics.QueryResult, error)
// }
// ```
message MetricsQuery {
    string name = 1;
    string queryTemplate = 2;
    repeated string parameters = 3;
}

